# -*- coding: utf-8 -*-
"""Servo Prediction using Linear Regression.csv

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AJFSIilOWBaaqh9YSnyXgUiPx2QUUrG1

Servo Prediction using Linear Regression

Get Understanding about the DataFrame

What is Servo: In the context of electronics and robotics, a servo (short for "servomechanism") is a type of motor that provides precise control of angular or linear position. It is commonly used in various applications, including robotics, automation, RC (remote-controlled) vehicles, drones, and many other devices where accurate control of movement is required.

A data frame with 167 observations on 5 variables, 4 nominal and 1 as the target class. This data set is from a simulation of a servo system involving a servo amplifier, a motor, a lead screw/nut, and a sliding carriage of some sort. It may have been on of the translational axes of a robot on the 9th floor of the AI lab. In any case, the output value is almost certainly a rise time. The variables that describe the data set and their values are the following:

    1. Motor A,B,C,D,E
    2. Screw A,B,C,D,E
    3. Pgain 3,4,5,6
    4. Vgain 1,2,3,4,5
    5. Class 0.13 to 7.10
"""

# Import libraries
import pandas as pd
import numpy as np

# Import CSV as DataFrame
df = pd.read_csv("https://github.com/YBI-Foundation/Dataset/raw/main/Servo%20Mechanism.csv")

# Get the first five rows of DataFrame
df.head()

# Get Information of DataFrame
df.info()

# Get the Summary Statistics
df.describe()

# Get column Names
df.columns

# Get shapes of DataFrame
df.shape

# Get Categories and counts of Categorical Variables
df[['Motor']].value_counts()

df[['Screw']].value_counts()

# Get encoding of categorical features
df.replace({'Motor':{'A':0,'B':1,'C':2,'D':3,'E':4}},inplace=True)

df.replace({'Screw':{'A':0,'B':1,'C':2,'D':3,'E':4}},inplace=True)

# Defien y(dependent or label or target variable) and X (independet or features or attribute Variable)
y = df['Class']

y.shape

y

X = df[['Motor', 'Screw', 'Pgain', 'Vgain']]

X = df.drop('Class', axis=1)

X.shape

X

# Get Train test split
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state=2529)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

# Get model train
from sklearn.linear_model import LinearRegression

lr = LinearRegression()

lr.fit(X_train, y_train)
LinearRegression()

# Get Model Prediction
y_pred = lr.predict(X_test)

y_pred.shape

y_pred

# Get Model Evaluation
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

mean_squared_error(y_test,y_pred)

mean_absolute_error(y_test,y_pred)

r2_score(y_test,y_pred)

# Get Visualization of Actual Vs Predicted Results
import matplotlib.pyplot as plt
plt.scatter(y_test,y_pred)
plt.xlabel("Actual")
plt.ylabel("Predicted")
plt.title("Actual Vs Predicted")
plt.show()

"""Get Futue Predictions

Lets select a random sample from existing dataset as new value
Steps to follow

   1. Extract a random row using sample function
   2. Separate X and y
   3. Standardize X
   4. Predict
"""

X_new = df.sample(1)

X_new

X_new.shape

X_new = X_new.drop('Class', axis = 1)

X_new

X_new.shape

y_pred_new = lr.predict(X_new)

y_pred_new